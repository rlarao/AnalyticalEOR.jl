var documenterSearchIndex = {"docs":
[{"location":"reactive_transport/theory/#Theory","page":"Theory","title":"Theory","text":"","category":"section"},{"location":"reactive_transport/plotting/#Plotting-Recipes","page":"Plotting Recipes","title":"Plotting Recipes","text":"","category":"section"},{"location":"types_and_methods/#Types-and-Methods","page":"Types and Methods","title":"Types and Methods","text":"","category":"section"},{"location":"types_and_methods/","page":"Types and Methods","title":"Types and Methods","text":"Modules = [AnalyticalEOR]","category":"page"},{"location":"types_and_methods/#AnalyticalEOR.ChemicalFlooding","page":"Types and Methods","title":"AnalyticalEOR.ChemicalFlooding","text":"ChemicalFlooding(;wf::WaterFlooding, krs::Vector{RelPerms{Float64}}, D::Vector{Float64})\n\nType that defines the chemical EOR problem where a chemical is injected to change the fractional flow curve to conditions favorable to oil recovery.\n\nThe waterflooding problem is first defined based on the fluids viscosities and relative permeabilities. Then, a second set of relative permeabilities is defined in correspondance to the impact of the injected chemical on the  oil and water mobilities.\n\nMore than one chemical wave can be defined. In the following example there are two chemical waves with their corresponding retardation factors D.\n\nExample\n\n# Define the waterflooding problem\n kr = RelPerms(swr=0.2,\n                    sor=0.2,\n                    krw0=0.2,\n                    kro0=0.5,\n                    nw= nw,\n                    no=no\n                    )\n\nμw = 1.0\nμo = 5.0\n\nwf = WaterFlooding(\n                kr=kr,\n                μw=μw,\n                μo=μo\n                )\n\n# Define second relative permeability\nkr_2 = RelPerms(swr=0.2,\n                sor=0.2,    \n                krw0=0.5,\n                kro0=1.0,\n                nw=3.0,\n                no=2.0\n                )\n\n\nkr3 = RelPerms(swr=0.2,\n                sor=0.2,    \n                krw0=0.2,\n                kro0=1.0,\n                nw=3.0,\n                no=2.0\n                )\n\ncf = ChemicalFlooding(\n                wf = wf,\n                krs = [kr3, kr2],\n                D = [0.5, 0.25]\n                )\n\n\n\n\n\n\n","category":"type"},{"location":"types_and_methods/#AnalyticalEOR.RelPerms","page":"Types and Methods","title":"AnalyticalEOR.RelPerms","text":"RelPerms(swr::T, sor::T, krw0::T, kro0, nw::T, no::T) where T <: Float64\n\nType that defines the water and oil relative permeabilities using Brooks-Corey model.\n\nExample\n\nkr = RelPerms(swr = 0.2,\n              sor = 0.2,\n              krw0 = 0.2,\n              kro0 = 0.5,\n              nw = 1.5, \n              no = 1.5, \n              )\n\n\n\n\n\n\n","category":"type"},{"location":"types_and_methods/#AnalyticalEOR.WaterFlooding","page":"Types and Methods","title":"AnalyticalEOR.WaterFlooding","text":"WaterFlooding(;kr::RelPerms, μw::T, μo::T) where T <: Float64\n\nType that defines the waterflooding problem in terms of the oil and water  relative permeabilities and viscosities.\n\nExample\n\n kr = RelPerms(swr=0.2,\n                    sor=0.2,\n                    krw0=0.2,\n                    kro0=0.5,\n                    nw= nw,\n                    no=no)\n\n    μw = 1.0\n    μo = 5.0\n\n\twf = WaterFlooding(\n\t\t\t\t\tkr=kr,\n\t\t\t\t\tμw=μw,\n\t\t\t\t\tμo=μo\n\t)\n\nThe WaterFlooding struct holds the function to calculate the water fractional flow:\n\nExample\n\ns = collect(range(kr.swr, 1 - kr.sor); length=100)\nf = wf.f(s) \n\n\n\n\n\n","category":"type"},{"location":"types_and_methods/#AnalyticalEOR.animate_sat_profile-Tuple{Vector{T} where T, Real}","page":"Types and Methods","title":"AnalyticalEOR.animate_sat_profile","text":"animate_sat_profile(sol::Vector, t::Real; dt=0.01)\n\nFunction that returns an animation of the saturation profile.\n\nExample\n\nkr = RelPerms(swr=0.2,\n                sor=0.2,\n                krw0=0.2,\n                kro0=0.5,\n                nw= nw,\n                no=no)\n\nμw = 1.0\nμo = 5.0\n\nwf = WaterFlooding(\n                kr=kr,\n                μw=μw,\n                μo=μo\n                )\n\nsol = solve_wf(wf, kr.swr, 1 - kr.sor)\n\nanimate_sat_profile(sol, 0.5, dt=0.01)\n\n\n\n\n\n","category":"method"},{"location":"types_and_methods/#AnalyticalEOR.plot_fractional_flow-Tuple{ChemicalFlooding, Vector{T} where T}","page":"Types and Methods","title":"AnalyticalEOR.plot_fractional_flow","text":"Function that returns the fractional flow solution\n\nExample\n\nkr = RelPerms(swr=0.2,\n                sor=0.2,\n                krw0=0.2,\n                kro0=0.5,\n                nw= nw,\n                no=no)\n\nμw = 1.0\nμo = 5.0\n\nwf = WaterFlooding(\n                kr=kr,\n                μw=μw,\n                μo=μo\n                )\n\nsol = solve_wf(wf, kr.swr, 1 - kr.sor)\n\nplot_fractional_flow(wf, sol)\n\n\n\n\n\n","category":"method"},{"location":"types_and_methods/#AnalyticalEOR.plot_sat_profile-Tuple{Vector{T} where T, Real}","page":"Types and Methods","title":"AnalyticalEOR.plot_sat_profile","text":"plot_sat_profile(sol::Vector, t::Real)\n\nFunction to plot saturation profile at a given time t.\n\nExample\n\nkr = RelPerms(swr=0.2,\n                sor=0.2,\n                krw0=0.2,\n                kro0=0.5,\n                nw= nw,\n                no=no)\n\nμw = 1.0\nμo = 5.0\n\nwf = WaterFlooding(\n                kr=kr,\n                μw=μw,\n                μo=μo\n                )\n\nsol = solve_wf(wf, kr.swr, 1 - kr.sor)\n\nplot_sat_profile(sol, 0.5)\n\n\n\n\n\n","category":"method"},{"location":"types_and_methods/#AnalyticalEOR.solve_cf-Tuple{ChemicalFlooding, Float64, Float64}","page":"Types and Methods","title":"AnalyticalEOR.solve_cf","text":"solve_cf(cf::ChemicalFlooding, si::Float64, sj::Float64)\n\nFunction to solve the chemical flooding problem using the  initial water saturation si and injection water saturation sj.\n\nreturns a list with the saturations, type of wave, specific velocities, and fractional flow function\n\n    [\n        (s1, s2, :spreading, df, f)\n        (s3, s4, :shock, Δf, f)\n    ]\n\nwhere df is a function to calculate the derivative of the water  fractional flow f when it is a spreading wave, and Δf is the specific velocity of the shock.\n\n\n\n\n\n","category":"method"},{"location":"types_and_methods/#AnalyticalEOR.solve_wf-Tuple{WaterFlooding, Float64, Float64}","page":"Types and Methods","title":"AnalyticalEOR.solve_wf","text":"Function to solve the waterflooding problem based on a waterflooding problem, initial water saturation si, and injection water saturation si.\n\nreturns a list with the saturations, type of wave, specific velocities, and fractional flow function\n\n    [\n        (s1, s2, :spreading, df, f)\n        (s3, s4, :shock, Δf, f)\n    ]\n\n\nwhere df is a function to calculate the derivative of the water  fractional flow f when it is a spreading wave, and Δf is the specific velocity of the shock.\n\nExample\n\n kr = RelPerms(swr=0.2,\n                    sor=0.2,\n                    krw0=0.2,\n                    kro0=0.5,\n                    nw= nw,\n                    no=no)\n\n    μw = 1.0\n    μo = 5.0\n\n\twf = WaterFlooding(\n\t\t\t\t\tkr=kr,\n\t\t\t\t\tμw=μw,\n\t\t\t\t\tμo=μo\n    sol = solve_wf(wf, kr.swr, 1 - kr.sor)\n\n\n\n\n\n","category":"method"},{"location":"fractional_flow/waterflooding/#Water-Flooding","page":"Water Flooding","title":"Water Flooding","text":"","category":"section"},{"location":"examples/waterflooding/#Waterflooding","page":"Waterflooding","title":"Waterflooding","text":"","category":"section"},{"location":"examples/waterflooding/","page":"Waterflooding","title":"Waterflooding","text":"    using AnalyticalEOR\n    \n    kr = RelPerms(swr=0.2,\n                    sor=0.2,\n                    krw0=0.2,\n                    kro0=0.5,\n                    nw=1.5,\n                    no=1.5)","category":"page"},{"location":"examples/waterflooding/","page":"Waterflooding","title":"Waterflooding","text":"e^i","category":"page"},{"location":"#[AnalyticalEOR.jl](https://github.com/rlarao/AnalyticalEOR.jl)","page":"Home","title":"AnalyticalEOR.jl","text":"","category":"section"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The latest version of AnalyticalEOR.jl can be installed via the built-in package manager in Julia.","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia>]\n(v1.6) pkg> add https://github.com/rlarao/AnalyticalEOR.jl\n(v1.6) pkg> instantiate","category":"page"},{"location":"","page":"Home","title":"Home","text":"For development purposes, clone the AnalyticalEOR.jl repository to ~/.julia/dev/","category":"page"},{"location":"","page":"Home","title":"Home","text":"~/.julia/dev: git clone https://github.com/rlarao/AnalyticalEOR.jl","category":"page"},{"location":"","page":"Home","title":"Home","text":"Then use dev to add AnalyticalEOR to Julia's path","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia>]\n(v1.6) pkg> dev AnalyticalEOR\n(v1.6) pkg> instantiate","category":"page"},{"location":"#Developers","page":"Home","title":"Developers","text":"","category":"section"},{"location":"fractional_flow/chemicalflooding/#Chemical-Flooding","page":"Chemical Flooding","title":"Chemical Flooding","text":"","category":"section"},{"location":"reactive_transport/ionexchange/#Solution-with-Ion-Exchange-Reactions","page":"Solution with Ion Exchange Reactions","title":"Solution with Ion Exchange Reactions","text":"","category":"section"}]
}
